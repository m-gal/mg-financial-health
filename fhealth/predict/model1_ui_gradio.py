"""
    Create UI to play w/ Machine Learning Model.

    To expose the localhost to the web, use the 'localtunnel' service
    https://localtunnel.github.io/www/
    for Gradio the <PORT> as a rule is 7860

    >node -v
        v14.17.4
    >lt --port <PORT>
        your url is: ......

    @author: mikhail.galkin
"""

# %% Load libraries -------------------------------------------------------------
import sys
import pandas as pd
import gradio as gr
from pathlib import Path

sys.path.extend(["..", "../..", "../../..", ".", "./.", "././."])
from fhealth.utils import model1_load
from fhealth.utils import model1_load_bins
from fhealth.utils import model1_get_rating
from fhealth.config import model1_path

sics = [
    100,
    200,
    700,
    900,
    1000,
    1040,
    1220,
    1221,
    1311,
    1381,
    1382,
    1389,
    1400,
    1520,
    1531,
    1600,
    1623,
    1700,
    1731,
    2000,
    2013,
    2020,
    2024,
    2030,
    2040,
    2050,
    2060,
    2070,
    2080,
    2082,
    2086,
    2090,
    2092,
    2100,
    2111,
    2200,
    2221,
    2273,
    2300,
    2320,
    2400,
    2430,
    2451,
    2452,
    2510,
    2511,
    2590,
    2611,
    2621,
    2670,
    2673,
    2711,
    2721,
    2731,
    2750,
    2771,
    2780,
    2800,
    2810,
    2820,
    2821,
    2833,
    2834,
    2835,
    2836,
    2840,
    2842,
    2844,
    2851,
    2860,
    2870,
    2890,
    2891,
    2911,
    2990,
    3011,
    3021,
    3050,
    3060,
    3086,
    3089,
    3100,
    3140,
    3211,
    3220,
    3270,
    3272,
    3310,
    3312,
    3317,
    3330,
    3334,
    3350,
    3360,
    3390,
    3420,
    3430,
    3433,
    3440,
    3442,
    3443,
    3460,
    3470,
    3480,
    3490,
    3510,
    3530,
    3531,
    3533,
    3540,
    3541,
    3559,
    3560,
    3561,
    3562,
    3564,
    3569,
    3570,
    3571,
    3572,
    3576,
    3577,
    3578,
    3579,
    3580,
    3585,
    3600,
    3612,
    3613,
    3620,
    3621,
    3630,
    3634,
    3640,
    3651,
    3652,
    3661,
    3663,
    3669,
    3670,
    3672,
    3674,
    3677,
    3679,
    3690,
    3711,
    3714,
    3715,
    3721,
    3728,
    3730,
    3743,
    3751,
    3760,
    3790,
    3812,
    3821,
    3822,
    3823,
    3825,
    3826,
    3827,
    3829,
    3841,
    3842,
    3843,
    3844,
    3845,
    3861,
    3910,
    3944,
    3949,
    3990,
    4011,
    4013,
    4210,
    4213,
    4400,
    4412,
    4512,
    4513,
    4522,
    4581,
    4610,
    4700,
    4731,
    4812,
    4813,
    4822,
    4832,
    4833,
    4841,
    4899,
    4900,
    4911,
    4922,
    4923,
    4924,
    4931,
    4932,
    4941,
    4950,
    4953,
    4955,
    5000,
    5030,
    5031,
    5040,
    5045,
    5047,
    5050,
    5063,
    5065,
    5072,
    5080,
    5084,
    5094,
    5099,
    5110,
    5122,
    5130,
    5140,
    5141,
    5150,
    5160,
    5171,
    5172,
    5180,
    5190,
    5200,
    5211,
    5331,
    5400,
    5411,
    5500,
    5531,
    5600,
    5661,
    5700,
    5712,
    5731,
    5810,
    5812,
    5900,
    5912,
    5940,
    5944,
    5960,
    5961,
    5990,
    6022,
    6099,
    6141,
    6153,
    6199,
    6200,
    6211,
    6282,
    6324,
    6399,
    6411,
    6500,
    6510,
    6519,
    6531,
    6770,
    6794,
    6798,
    6799,
    7000,
    7011,
    7200,
    7310,
    7311,
    7320,
    7330,
    7331,
    7350,
    7359,
    7361,
    7363,
    7370,
    7371,
    7372,
    7373,
    7374,
    7380,
    7381,
    7384,
    7389,
    7500,
    7510,
    7600,
    7812,
    7841,
    7900,
    7948,
    7990,
    7997,
    8000,
    8011,
    8050,
    8051,
    8060,
    8062,
    8071,
    8082,
    8090,
    8093,
    8200,
    8700,
    8711,
    8731,
    8741,
    8742,
    8900,
]

artifacts_path = Path(model1_path).parent

# Load model w/ XGBoost python API:
model = model1_load(model1_path)
# Load bins for rating groups
bins = model1_load_bins(artifacts_path)


def get_score(
    sic,
    solvency_debt_ratio,
    liquid_current_ratio,
    liquid_quick_ratio,
    liquid_cash_ratio,
    profit_net_margin,
    profit_roa,
    active_acp,
):
    input_data = pd.DataFrame.from_dict(
        {
            "sic": [int(sic)],
            "solvency_debt_ratio": [solvency_debt_ratio],
            "liquid_current_ratio": [liquid_current_ratio],
            "liquid_quick_ratio": [liquid_quick_ratio],
            "liquid_cash_ratio": [liquid_cash_ratio],
            "profit_net_margin": [profit_net_margin],
            "profit_roa": [profit_roa],
            "active_acp": [active_acp],
        }
    )

    y_proba1 = model.predict_proba(input_data)[:, 1]
    score = round(y_proba1[0] * 1000)
    group, rating, rating_desc = model1_get_rating(y_proba1, bins)

    return score, group, rating, rating_desc


iface = gr.Interface(
    fn=get_score,
    inputs=[
        gr.inputs.Dropdown(choices=sics, type="value", default="3330", label="SIC"),
        gr.inputs.Slider(0, 5, step=0.05, default=2.5, label="Debt ratio"),
        gr.inputs.Slider(0, 20, step=0.1, default=10, label="Current ratio"),
        gr.inputs.Slider(0, 18, step=0.1, default=9, label="Quick ratio"),
        gr.inputs.Slider(0, 16, step=0.1, default=8, label="Cash ratio"),
        gr.inputs.Slider(-2, 2, step=0.05, default=0, label="Net Profit margin"),
        gr.inputs.Slider(-2.5, 2.5, step=0.05, default=0, label="Return on assets"),
        gr.inputs.Slider(0, 365, step=1, default=181, label="Receivables turnover, days"),
    ],
    outputs=[
        gr.outputs.Textbox(type="number", label="Score"),
        gr.outputs.Textbox(type="str", label="Group"),
        gr.outputs.Textbox(type="str", label="Rating"),
        gr.outputs.Textbox(type="str", label="Quality"),
    ],
    layout="horizontal",
    theme="huggingface",
    title="Get general financial health score",
    description="Simple application to score the current financial state for companies",
    allow_flagging=False,
)


# %% Run ------------------------------------------------------------------------
""" share (bool) - whether to create a publicly shareable link from your compute for the interface."""
if __name__ == "__main__":
    iface.launch(share=False)


# %% TESLA
# sic = "3711"
# solvency_debt_ratio = 0.25
# liquid_current_ratio = 1.8
# liquid_quick_ratio = 1.2
# liquid_cash_ratio = 1.4
# profit_net_margin = 0.1
# profit_roa = 0.05
# active_acp = 17

# %% APPLE
# sic = "7372"
# solvency_debt_ratio = 4.1
# liquid_current_ratio = 1.0
# liquid_quick_ratio = 1.0
# liquid_cash_ratio = 0.2
# profit_net_margin = 0.25
# profit_roa = 0.25
# active_acp = 15
